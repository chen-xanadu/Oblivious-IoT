// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: message/message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShuffleServerClient is the client API for ShuffleServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShuffleServerClient interface {
	Shuffle(ctx context.Context, opts ...grpc.CallOption) (ShuffleServer_ShuffleClient, error)
}

type shuffleServerClient struct {
	cc grpc.ClientConnInterface
}

func NewShuffleServerClient(cc grpc.ClientConnInterface) ShuffleServerClient {
	return &shuffleServerClient{cc}
}

func (c *shuffleServerClient) Shuffle(ctx context.Context, opts ...grpc.CallOption) (ShuffleServer_ShuffleClient, error) {
	stream, err := c.cc.NewStream(ctx, &ShuffleServer_ServiceDesc.Streams[0], "/ShuffleServer/Shuffle", opts...)
	if err != nil {
		return nil, err
	}
	x := &shuffleServerShuffleClient{stream}
	return x, nil
}

type ShuffleServer_ShuffleClient interface {
	Send(*ShuffleRequest) error
	Recv() (*ShuffleResponse, error)
	grpc.ClientStream
}

type shuffleServerShuffleClient struct {
	grpc.ClientStream
}

func (x *shuffleServerShuffleClient) Send(m *ShuffleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *shuffleServerShuffleClient) Recv() (*ShuffleResponse, error) {
	m := new(ShuffleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShuffleServerServer is the server API for ShuffleServer service.
// All implementations must embed UnimplementedShuffleServerServer
// for forward compatibility
type ShuffleServerServer interface {
	Shuffle(ShuffleServer_ShuffleServer) error
	mustEmbedUnimplementedShuffleServerServer()
}

// UnimplementedShuffleServerServer must be embedded to have forward compatible implementations.
type UnimplementedShuffleServerServer struct {
}

func (UnimplementedShuffleServerServer) Shuffle(ShuffleServer_ShuffleServer) error {
	return status.Errorf(codes.Unimplemented, "method Shuffle not implemented")
}
func (UnimplementedShuffleServerServer) mustEmbedUnimplementedShuffleServerServer() {}

// UnsafeShuffleServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShuffleServerServer will
// result in compilation errors.
type UnsafeShuffleServerServer interface {
	mustEmbedUnimplementedShuffleServerServer()
}

func RegisterShuffleServerServer(s grpc.ServiceRegistrar, srv ShuffleServerServer) {
	s.RegisterService(&ShuffleServer_ServiceDesc, srv)
}

func _ShuffleServer_Shuffle_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ShuffleServerServer).Shuffle(&shuffleServerShuffleServer{stream})
}

type ShuffleServer_ShuffleServer interface {
	Send(*ShuffleResponse) error
	Recv() (*ShuffleRequest, error)
	grpc.ServerStream
}

type shuffleServerShuffleServer struct {
	grpc.ServerStream
}

func (x *shuffleServerShuffleServer) Send(m *ShuffleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *shuffleServerShuffleServer) Recv() (*ShuffleRequest, error) {
	m := new(ShuffleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ShuffleServer_ServiceDesc is the grpc.ServiceDesc for ShuffleServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShuffleServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ShuffleServer",
	HandlerType: (*ShuffleServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Shuffle",
			Handler:       _ShuffleServer_Shuffle_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message/message.proto",
}
